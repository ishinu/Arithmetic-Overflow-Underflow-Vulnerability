// SPDX-License-Identifier:MIT
pragma solidity 0.6.12;

contract Overflow{
    mapping(address=>uint) public balances;
    mapping(address=>uint) public timeLock;

    function deposit() public payable{
        balances[msg.sender] += msg.value;
        timeLock[msg.sender] += block.timestamp + 1 weeks;
    }

    function timeLeft(address _check) view public returns(uint _time){
        _time = timeLock[_check];
        return _time;
    }   
    

    function increaseLockTime(uint _secondsToIncrease) public{
        timeLock[msg.sender] += _secondsToIncrease ;
    }

    function withdraw() public{
        uint balance = balances[msg.sender];
        require(balance>0);
        require(block.timestamp>timeLock[msg.sender]);
        (bool sent,) = msg.sender.call{value:balance}("");
        require(sent,"Failed to send Ether");
        balances[msg.sender] = 0;
    }
}


